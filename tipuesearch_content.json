{"pages":[{"tags":"","url":"http://blog.lonelylty.com/functions/search.html","text":"\n\n\n醍醐灌顶\n\n\n\n\n\n\n\n\n\r\n    .social a[href*='/feeds/all']:before {content: url('http://blog.lonelylty.com/images/rss.png'); margin-right: 2px; vertical-align: -3px;}\r\n    .social a[href*='facebook.com']:before {content: url('http://blog.lonelylty.com/images/facebook.png'); margin-right: 2px; vertical-align: -3px;}\r\n    .social a[href*='github.com']:before {content: url('http://blog.lonelylty.com/images/github.png'); margin-right: 2px; vertical-align: -3px;}\r\n    .social a[href*='stackoverflow.com']:before {content: url('http://blog.lonelylty.com/images/stackoverflow.png'); margin-right: 2px; vertical-align: -3px;}\r\n    \n\n\n\n\n\n\n\n\n\n\n\n醍醐灌顶君子生非异也,善假于物也.\n\n\n\n\nHome\nCoding\nLiving\nArchives\nRandom Article\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCategories\n\nCoding\nLiving\n\n\n\nTags\n\nsport\nmarkdown\nregex\n\n\n\n\nSocial\n\nRSS\nGitHub\nFaceBook\nStackOverFlow\n\n\n\n\n\nLINKS\n\nPelican\n阿里万网\nRGB颜色查询\n\n\n\n \n\n\n\n\n\n\n\n\r\n              Tired of life, less than half comes from survival, largely derived from comparisons.\r\n              Email:  lonelylty@gmail.com\r\n              Copyright © 2017  nick, All Rights Reserved, powered by Pelican and \r\n              GitHub Pages，more details\r\n              reference.\r\n              \n\n\n\n\n\nGithub\nFacebook\nGoogle+\n\n\n\n\n\n\n\n\n\n\n\r\n        $(document).ready(function() {\r\n             $(\"#web_loading div\").animate({width:\"100%\"},800,function(){ \r\n                  setTimeout(function(){$(\"#web_loading div\").fadeOut(500); \r\n                  }); \r\n              });\r\n             $('#tipue_search_input').tipuesearch({\r\n                 'show': 10,\r\n                 'mode': 'json',\r\n                 'contentLocation': 'http://blog.lonelylty.com/tipuesearch_content.json',\r\n                 'descriptiveWords': 20,\r\n                 'showURL': false,\r\n             });\r\n        });\r\n    \n\n\n\n\n\n\n\r\n    var local = '';\r\n    if (remote_ip_info['city'] == \"\") {\r\n      local = remote_ip_info['province'];\r\n    }\r\n    else {\r\n      local = remote_ip_info['city'];\r\n    }\r\n    document.title = local + \" \" + document.title;\r\n    \n\n\n\n\n\r\n        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\n        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\r\n\r\n        ga('create', 'UA-86964520-1', 'blog.lonelylty.com');\r\n        ga('send', 'pageview');\r\n\r\n      \n\n","title":"醍醐灌顶"},{"tags":"Living","url":"http://blog.lonelylty.com/articles/2016/11/01/football/","text":"科技园足球场 南山科技园科兴科学园北门，新开场地，长园足球场。踢一场送一场酬宾。每个队4月1号前可享受一次赠送。三个5人场，一个7人场。预定电话15811800238。","title":"科技园"},{"tags":"Coding","url":"http://blog.lonelylty.com/articles/2016/10/31/markdown/","text":"1. 标题设置（让字体变大，和word的标题意思一样） 在Markdown当中设置标题，有两种方式： 第一种：通过在文字下方添加\"=\"和\"-\"，他们分别表示一级标题和二级标题。 第二种：在文字开头加上 \"#\"，通过\"#\"数量表示几级标题。（一共只有1~6级标题，1级标题字体最大） 2. 块注释（blockquote） 通过在文字开头添加\">\"表示块注释。（当>和文字之间添加五个blank时，块注释的文字会有变化。） 3. 斜体 将需要设置为斜体的文字两端使用1个\"*\"或者\"_\"夹起来 4. 粗体 将需要设置为斜体的文字两端使用2个\"*\"或者\"_\"夹起来 5. 无序列表 在文字开头添加( , +, and -)实现无序列表。但是要注意在( , +, and -)和文字之间需要添加空格。（建议：一个文档中只是用一种无序列表的表示方式） 6. 有序列表 使用数字后面跟上句号。（还要有空格） 7. 链接（Links） Markdown中有两种方式，实现链接，分别为内联方式和引用方式。 内联方式：This is an example link . 引用方式： I get 10 times more traffic from Google than from Yahoo or MSN . 8. 图片（Images） 图片的处理方式和链接的处理方式，非常的类似。 内联方式： 引用方式： 9. 代码（HTML中所谓的Code） 实现方式有两种： 第一种：简单文字出现一个代码框。使用 <blockquote> 。（ 不是单引号而是左上角的ESC下面~中的 ） 第二种：大片文字需要实现代码框。使用Tab和四个空格。 10. 脚注（footnote） 实现方式如下： hello[&#94;hello] 11. 下划线 在空白行下方添加三条\"-\"横线。（前面讲过在文字下方添加\"-\"，实现的2级标题） 推荐一款在线的Markdown编辑器","title":"Markdown 11种基本语法"},{"tags":"Coding","url":"http://blog.lonelylty.com/articles/2016/09/01/regex/","text":"常用元字符 符号 说明 . 匹配除换行符以外的任意字符。 \\w 匹配字母或数字或下划线或汉字。 \\s 匹配任意的空白符。 \\d 匹配数字。 \\b 匹配单词的开始或结束。 [ck] 匹配包含括号内元素的字符 &#94; 匹配行的开始。 $ 匹配行的结束。 \\ 对下一个字符转义。比如$是个特殊 的字符。要匹配$的话就得用\\$ 反义元字符 符号 说明 \\W 匹配任意不是字母，数字，下划线，汉字的字符。 \\S 匹配任意不是空白符的字符。等价于 [&#94; \\f\\n\\r\\t\\v]。 \\D 匹配任意非数字的字符。等价于 [&#94;0-9]。 \\B 匹配不是单词开头或结束的位置。 [&#94;CK] 匹配除了CK以外的任意字符。 特殊元字符 符号 说明 \\f 匹配一个换页符。等价于 \\x0c 和 \\cL \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ \\r 匹配一个回车符。等价于 \\x0d 和 \\cM \\t 匹配一个制表符。等价于 \\x09 和 \\cI \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK 限定符 符号 说明 * 匹配前面的子表达式零次或多次。 + 匹配前面的子表达式一次或多次。 ? 匹配前面的子表达式零次或一次。 n 是一个非负整数。匹配确定的 n 次。 n 是一个非负整数。至少匹配n 次。 m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。 懒惰限定符 符号 说明 *? 重复任意次，但尽可能少重复。 如 \"acbacb\" 正则 \"a.*?b\" 只会取到第一个\"acb\" 原本可以全部取到但加了限定符后， 只会匹配尽可能少的字符 ，而\"acbacb\"最少字符的结果就是\"acb\" 。 +? 重复1次或更多次，但尽可能少重复。与上面一样，只是至少要重复1次。 ?? 重复0次或1次，但尽可能少重复。如 \"aaacb\" 正则 \"a.??b\" 只会取到最后的三个字符\"acb\"。 重复n到m次，但尽可能少重复。如 \"aaaaaaaa\" 正则 \"a 重复n次以上，但尽可能少重复。如 \"aaaaaaa\" 正则 \"a 捕获分组 符号 说明 (exp) 匹配exp,并捕获文本到自动命名的组里。 (? exp) 匹配exp,并捕获文本到名称为name的组里。 (?:exp) 匹配exp,不捕获匹配的文本，也不给此分组分配组号以下为零宽断言。 (?=exp) 匹配exp前面的位置。 如 \"How are you doing\" 正则\"(? .+(?=ing))\" 这里取ing前所有的字符， 并定义了一个捕获分组名字为 \"txt\" 而\"txt\"这个组里的值为\"How are you do\"; (?<=exp) 匹配exp后面的位置。 如 \"How are you doing\" 正则\"(? (?<=How).+)\" 这里取\"How\"之后所有的字符， 并定义了一个捕获分组名字为 \"txt\" 而\"txt\"这个组里的值为\" are you doing\"; (?!exp) 匹配后面跟的不是exp的位置。如 \"123abc\" 正则 \"\\d (?<!exp) 匹配前面不是exp的位置。 如 \"abc123 \" 正则 \"(?<![0-9])123\" 匹配\"123\"前面是非数字的结果也可写成\"(?!<\\d)123\"","title":"正则速查"}]}